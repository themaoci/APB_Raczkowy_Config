//////////////////////////////////
// 1.10.0-compatible RTW shader //
//////////////////////////////////

#include "Common.usf"

float3 fromRGB( float3 rgb, float Kr, float Kb ) {
       float y = Kr * rgb.r + Kb * rgb.b + (1.f-Kr-Kb) * rgb.g;
       float cb = 0.5f * (rgb.b - y)/(1.f - Kb);
       float cr = 0.5f * (rgb.r - y)/(1.f - Kr);
       return float3( y, cr + 0.5, cb + 0.5 );
}

float2 invScale;
float2 halfSourcePixelSize;
float2 halfTargetPixelSize;
float2 letterboxOffset;

float3 fromRGB_toYCrCb_Gamma( float4 rgba ){
	return fromRGB(
		saturate(sqrt(rgba.xyz)), 0.299, 0.114 );
}

float4 scene( float2 t ) {	
	float4 result = 0.0;
	if( t.x >= 0.0 && t.x <= 1.0 && t.y >= 0.0 && t.y <= 1.0 ) {

		//do a little bit of extra sampling to reduce aliasing
		result  = tex2D( SceneColorTexture, t);
		result += tex2D( SceneColorTexture, t + float2(-halfTargetPixelSize.x, -halfTargetPixelSize.y));
		result += tex2D( SceneColorTexture, t + float2(halfTargetPixelSize.x, -halfTargetPixelSize.y));
		result += tex2D( SceneColorTexture, t + float2(-halfTargetPixelSize.x, halfTargetPixelSize.y));
		result += tex2D( SceneColorTexture, t + float2(halfTargetPixelSize.x, halfTargetPixelSize.y));
		result *= 0.25f;
		
	}
	return result;
}

void Main(
	float4 tex : TEXCOORD0,
	out float4 OutY  : COLOR0,
	out float4 OutCr : COLOR1,
	out float4 OutCb : COLOR2
	)
{

	tex.xy += halfSourcePixelSize;
	float2 t = (tex.xy - letterboxOffset) * invScale;
	float2 dx = float2( halfSourcePixelSize.x * 2.0f,  0.0f ); //from resolution
	
	float4 rgba_0 = scene( t.xy );
	float4 rgba_1 = scene( t.xy + dx );
	float4 rgba_2 = scene( t.xy + dx * 2.0f );
	float4 rgba_3 = scene( t.xy + dx * 3.0f );
	
	//half-res chroma
	float2 q = (tex.xy * 2.0f - letterboxOffset) * invScale;
	float2 dx2 = dx * 2.0f;
	float4 rgba2_0 = scene( q.xy );
	float4 rgba2_1 = scene( q.xy + dx2 );
	float4 rgba2_2 = scene( q.xy + dx2 * 2.0f );
	float4 rgba2_3 = scene( q.xy + dx2 * 3.0f );
	
	//convert!
	float3 yuv_0 = fromRGB_toYCrCb_Gamma(rgba_0);
	float3 yuv_1 = fromRGB_toYCrCb_Gamma(rgba_1);
	float3 yuv_2 = fromRGB_toYCrCb_Gamma(rgba_2);
	float3 yuv_3 = fromRGB_toYCrCb_Gamma(rgba_3);
	
	//half-res chroma
	float3 yuv2_0 = fromRGB_toYCrCb_Gamma(rgba2_0);
	float3 yuv2_1 = fromRGB_toYCrCb_Gamma(rgba2_1);
	float3 yuv2_2 = fromRGB_toYCrCb_Gamma(rgba2_2);
	float3 yuv2_3 = fromRGB_toYCrCb_Gamma(rgba2_3);
	
	//swizzle so colour bytes assigned to pixel columns match physical layout in memory
	OutY  = float4( yuv_0.x, yuv_1.x, yuv_2.x, yuv_3.x ).zyxw;
	OutCb = float4( yuv2_0.y, yuv2_1.y, yuv2_2.y, yuv2_3.y ).zyxw;
	OutCr = float4( yuv2_0.z, yuv2_1.z, yuv2_2.z, yuv2_3.z ).zyxw;
	
}
